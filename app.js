const config = require('./Components/config');
const option = require('./Components/option');
const TelegramApi = require('node-telegram-bot-api');
const mysql = require('mysql');

const funcFile = require('./Components/func');

const token = `${config.tokenAPI}`;
const bot = new TelegramApi(token, {polling: true});

const conn = mysql.createConnection(config.databaseLocal);


const query = 'select * from cab_info';
const queryFirstCab = 'select * from cab_info where id_cab = 1';
const querySecondCab = 'select * from cab_info where id_cab = 2';
const queryOtherCom = 'SELECT * from comment';

const startBot = async () => {
    console.log('Bot has been started...')

    const nowDate = new Date().toLocaleDateString();
    const nowTime = new Date().toLocaleTimeString().slice(0, -3);

    let userDataArr = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    conn.connect(err => {
        if (err) {
            console.log(err);
            return err;
        } else {
            console.log('Database ----- OK')
        }
    })


    bot.setMyCommands([
        {command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'}
    ])

    bot.on('message', async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;
        const {first_name, username} = msg.from;
        // console.log(msg)
        const strComment = '/com';
        const strOffer = '/of';

        const strFIO = '/fio';
        const strNum = '/num';
        const strTXT = '/txt';
        const strData = '/dat';

        switch (text) {
            case '/start':
                await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/d43/740/d4374010-6842-3710-b8f0-115b0c414216/1.webp')
                funcFile.startFunction(conn,query,bot,chatId,nowDate,nowTime);
                break;
            case '/1':
                userDataArr.push('—É–ª.–í–∞–Ω—Ü–µ—Ç—Ç–∏,1/–±');
                funcFile.addAdress(bot, chatId);
                break;
            case '/2':
                userDataArr.push('—É–ª.–õ–∞–∑–æ,17');
                funcFile.addAdress(bot, chatId);
                break;

            default:
                if (text.slice(0, 4) == strComment) {
                    if (text.length == 4) {
                        funcFile.emptyText(bot, chatId);
                    } else {
                        await bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤\n\n"${text.slice(4)}"\n\n–ß—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ:\n/start`);
                        let addCommSQL = `INSERT INTO \`comment\` (\`id_comm\`, \`chatID\`, \`first_name\`, \`username\`, \`text\`, \`dateAdd\`) VALUES (NULL, '${chatId}', '${first_name}', '${username}', '${text.slice(4)}', '${nowDate} ${nowTime}')`;
                        await conn.query(addCommSQL, function (err, results) {
                            if (err) throw err;
                            console.log("Data comment sent...");
                        });
                    }
                } else if (text.slice(0, 3) == strOffer) {
                    if (text.length == 3) {
                        funcFile.emptyText(bot, chatId);
                    } else {
                        await bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n\n"${text.slice(3)}"\n\n–ß—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ:\n/start`);
                        let addOfferSQL = `INSERT INTO \`offer\` (\`id_offer\`, \`chatID\`, \`first_name\`, \`username\`, \`text\`, \`dateAdd\`) VALUES (NULL, '${chatId}', '${first_name}', '${username}', '${text.slice(3)}', '${nowDate} ${nowTime}')`;
                        await conn.query(addOfferSQL, function (err, results) {
                            if (err) throw err;
                            console.log("Data offer sent...");
                        });
                    }
                } else if (text.slice(0, 4) == strFIO) {
                    if (text.length == 4) {
                        funcFile.emptyText(bot, chatId);
                    } else {
                        userDataArr = [chatId, first_name, username, text.slice(4)];

                        await bot.sendMessage(chatId, `–í–∞—à–µ –§–ò–û —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n\n–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å –∫–∞–∫ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n\n–ù–∞–ø–∏—à–∏—Ç–µ/—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞:\n\n/num\n\n–ó–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ.\n\n<strong><ins>–ü—Ä–∏–º–µ—Ä:</ins></strong>\n"/num+7(999)670-90-80"`, {parse_mode: 'HTML'});
                    }
                } else if (text.slice(0, 4) == strNum) {
                    userDataArr.push(text.slice(4))
                    if (text.length == 4) {
                        funcFile.emptyText(bot, chatId);
                    } else {
                        await bot.sendMessage(chatId, `–í–∞—à –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n\n–¢–µ–ø–µ—Ä—å –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å –¥–∞–Ω—Ç–∏—Å—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è.\n\n–ù–∞–∂–º–∏—Ç–µ —Ç—É —Ü–∏—Ñ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–æ–º—É –í–∞–º –∞–¥—Ä–µ—Å—É.\n\n/1 - —É–ª.–í–∞–Ω—Ü–µ—Ç—Ç–∏,1/–±\n\n/2 - —É–ª.–õ–∞–∑–æ,17`);

                    }
                } else if (text.slice(0, 4) == strTXT) {
                    userDataArr.push(text.slice(4))
                    if (text.length == 4) {
                        funcFile.emptyText(bot, chatId);
                    } else {
                        if (userDataArr[5] == '—É–ª.–í–∞–Ω—Ü–µ—Ç—Ç–∏,1/–±') {
                            await conn.query(queryFirstCab, (err, result) => {
                                let otvet = bot.sendMessage(chatId, `–í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –∫–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø—Ä–∏–µ–º.\n\n–ù–∞–ø–∏—à–∏—Ç–µ/—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞:\n\n/dat\n\n–ó–∞—Ç–µ–º –ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–∞–∫ –≤ <strong>–ü–†–ò–ú–ï–†–ï</strong>.\n\n<strong><ins>–ü—Ä–∏–º–µ—Ä:</ins></strong>\n"/dat28.04.2022 12:00-13:00"\n\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –¥–∞–Ω—Ç–∏—Å—Ç–∞ –Ω–∞ —É–ª.–í–∞–Ω—Ü–µ—Ç—Ç–∏,1/–±:\n<ins>${result[0]['hours']}</ins> \n\n<pre>–î–∞—Ç–∞: ${nowDate}</pre>\n<pre>–í—Ä–µ–º—è: ${nowTime}</pre>`, {parse_mode: 'HTML'})
                                return otvet;
                            });

                        } else {
                            await conn.query(querySecondCab, (err, result) => {
                                let otvet = bot.sendMessage(chatId, `–í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –∫–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø—Ä–∏–µ–º.\n\n–ù–∞–ø–∏—à–∏—Ç–µ/—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞:\n\n/dat\n\n–ó–∞—Ç–µ–º –ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–∞–∫ –≤ <strong>–ü–†–ò–ú–ï–†–ï</strong>.\n\n<strong><ins>–ü—Ä–∏–º–µ—Ä:</ins></strong>\n"/dat28.04.2022 12:00-13:00"\n\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –¥–∞–Ω—Ç–∏—Å—Ç–∞ –Ω–∞ —É–ª.–õ–∞–∑–æ,17:\n<ins>${result[0]['hours']}</ins> \n\n<pre>–î–∞—Ç–∞: ${nowDate}</pre>\n<pre>–í—Ä–µ–º—è: ${nowTime}</pre>`, {parse_mode: 'HTML'})
                                return otvet;
                            });
                        }
                    }
                } else if (text.slice(0, 4) == strData) {
                    userDataArr.push(text.slice(4))
                    if (text.length == 4) {
                        funcFile.emptyText(bot, chatId);
                    } else {
                        // console.log(userDataArr);
                        await bot.sendMessage(chatId, `–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.\n–ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–¥—Å–µ—Å—Ç—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n–ß—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ:\n\n/start`);
                        let addNewPatientSQL = `INSERT INTO \`patient\` (\`id_pat\`, \`chatID\`, \`first_name\`, \`username\`, \`full_name\`, \`phone_number\`, \`street\`, \`problem\`, \`data\`,\`data_added\`) VALUES (NULL, '${userDataArr[0]}', '${userDataArr[1]}', '${userDataArr[2]}', '${userDataArr[3]}', '${userDataArr[4]}', '${userDataArr[5]}', '${userDataArr[6]}', '${userDataArr[7]}', '${nowDate} ${nowTime}')`;
                        await conn.query(addNewPatientSQL, function (err, results) {
                            if (err) throw err;
                            console.log("New data patient add...");
                        });
                    }
                } else {
                    bot.sendMessage(chatId, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å üò¢');
                }
        }
    });

    bot.on('callback_query', async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;

        switch (data) {
            case '/start':
                await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/d43/740/d4374010-6842-3710-b8f0-115b0c414216/1.webp')
                funcFile.startFunction(conn,query,bot,chatId,nowDate,nowTime);
                break;
            case '/firstCab':
                await bot.sendLocation(chatId, 56.08190229330038, 85.9995189472343);
                await conn.query(queryFirstCab, (err, result) => {
                    let otvet = bot.sendMessage(chatId, `üî¥ –ü–µ—Ä–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç ${funcFile.textInfoCabs(result, nowDate, nowTime)}`, {
                        parse_mode: 'HTML',
                        reply_markup: option.infoCabOptions.reply_markup
                    });
                    return otvet;
                });
                break;
            case '/secondCab':
                await bot.sendLocation(chatId, 56.05329690351322, 86.02844807387976);
                await conn.query(querySecondCab, (err, result) => {
                    return bot.sendMessage(chatId, `üîµ –í—Ç–æ—Ä–æ–π –∫–∞–±–∏–Ω–µ—Ç ${funcFile.textInfoCabs(result, nowDate, nowTime)}`, {
                        parse_mode: 'HTML',
                        reply_markup: option.infoCabOptions.reply_markup
                    });
                });
                break;
            case '/addOrder':
                await bot.sendMessage(chatId, `üìù –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É.\n(–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ") \n\n–û—Ç –í–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏:\n -–§–ò–û, \n -–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω, \n -–∫–∞–±–∏–Ω–µ—Ç –¥–∞–Ω—Ç–∏—Å—Ç, \n -–ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è, \n -—É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.`, option.addNameOptions)
                break;
            case '/comment':
                await bot.sendMessage(chatId, `–ß—Ç–æ –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞—Ç—å:\n\n/com (–º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞)\n\n–ß—Ç–æ –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞—Ç—å:\n\n/of (–º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞)\n\n<strong><ins>–ü—Ä–∏–º–µ—Ä:</ins></strong>\n"/com–û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å..." `, {
                    parse_mode: 'HTML',
                    reply_markup: option.infoCommentUsersOptions.reply_markup
                });
                break;
            case '/add_note_name':
                await bot.sendMessage(chatId, `–ù–∞–ø–∏—à–∏—Ç–µ/—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞:\n\n/fio\n\n–ó–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–ª–Ω—ã–µ —Ñ–∞–º–∏–ª–∏—é –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ.\n\n<strong><ins>–ü—Ä–∏–º–µ—Ä:</ins></strong>\n"/fio–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"`, {parse_mode: 'HTML'})
                break;
            case '/open_other_comment':
                await conn.query(queryOtherCom, (err, result) => {
                    let out =``;
                    for (let i = 0; i < result.length; i++) {
                        out += `${i + 1}. "${result[i]['first_name']}"\n\n–û—Ç–∑—ã–≤\n"${result[i]['text']}"\n\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n${result[i]['dateAdd']}\n\n___________________________\n\n`
                    }
                    return bot.sendMessage(chatId,`${out}` , {
                        parse_mode: 'HTML',
                        reply_markup: option.backPageOption.reply_markup
                    });
                });
                break;
            default:
                bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ —è –Ω–µ –ø–æ–π–º—É –í–∞—Å =(');
        }
    })
}

startBot();